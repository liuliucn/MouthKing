name: Deploy to GitHub Releases

on:
  push:
    branches:
      - master
permissions:
  contents: write

jobs:
  deploy-win:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v4
     - name: Get Version from Project File
       id: get-version
       shell: bash
       run: echo "version=$(grep -oE '<Version>[^<]+' MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj | sed 's/<Version>//')" >> $GITHUB_OUTPUT
     - name: Install .NET
       uses: actions/setup-dotnet@v4
       with:
         dotnet-version: 9.0.x
     - name: Publish Application
       run: dotnet publish MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj -c Release -o publish -r win-x64
     - name: Create Velopack Release
       run: |
          dotnet tool install -g vpk
          vpk pack -u MouthKing --packTitle MouthKing --icon logo.ico -v ${{ steps.get-version.outputs.version }} -p publish -c win --delta None
          vpk upload github --repoUrl https://github.com/${{ github.repository }} --publish --merge -c win  --releaseName "MouthKing ${{ steps.get-version.outputs.version }}" --tag v${{ steps.get-version.outputs.version }} --token ${{ secrets.GITHUB_TOKEN  }}
     - name: Upload Artifacts
       uses: actions/upload-artifact@v4
       with:
           name: win-build
           path: ./Releases
           retention-days: 1

  deploy-linux:
    runs-on: ubuntu-latest
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v4
     - name: Setup NativeAOT pre-requisites
       run: sudo apt-get install clang zlib1g-dev libkrb5-dev --assume-yes
     - name: Get Version from Project File
       id: get-version
       shell: bash
       run: echo "version=$(grep -oE '<Version>[^<]+' MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj | sed 's/<Version>//')" >> $GITHUB_OUTPUT
     - name: Install .NET
       uses: actions/setup-dotnet@v4
       with:
         dotnet-version: 9.0.x
     - name: Publish Application
       run: dotnet publish MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj -c Release -o publish -r linux-x64
     - name: Create Velopack Release
       run: |
          dotnet tool install -g vpk
          vpk pack -u MouthKing --packTitle MouthKing --icon logo.ico -v ${{ steps.get-version.outputs.version }} -p publish -c linux --delta None
          vpk upload github --repoUrl https://github.com/${{ github.repository }} --publish --merge -c linux --releaseName "MouthKing ${{ steps.get-version.outputs.version }}" --tag v${{ steps.get-version.outputs.version }} --token ${{ secrets.GITHUB_TOKEN  }}
     - name: Upload Artifacts
       uses: actions/upload-artifact@v4
       with:
           name: linux-build
           path: ./Releases
           retention-days: 1

  deploy-macos-x64:
    runs-on: macos-13
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v4
     - name: Get Version from Project File
       id: get-version
       shell: bash
       run: echo "version=$(grep -oE '<Version>[^<]+' MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj | sed 's/<Version>//')" >> $GITHUB_OUTPUT
     - name: Install .NET
       uses: actions/setup-dotnet@v4
       with:
         dotnet-version: 9.0.x
     - name: Publish Application
       run: dotnet publish MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj -c Release -o publish -r osx-x64
     - name: Create Velopack Release
       run: |
          dotnet tool install -g vpk
          vpk pack -u MouthKing --packTitle MouthKing --icon logo.icns -v ${{ steps.get-version.outputs.version }} -p publish -c macos-x64 --delta None
          vpk upload github --repoUrl https://github.com/${{ github.repository }} --publish --merge -c macos-x64 --releaseName "MouthKing ${{ steps.get-version.outputs.version }}" --tag v${{ steps.get-version.outputs.version }} --token ${{ secrets.GITHUB_TOKEN  }}
     - name: Upload Artifacts
       uses: actions/upload-artifact@v4
       with:
           name: macos-x64-build
           path: ./Releases
           retention-days: 1

  deploy-macos-arm64:
    runs-on: macos-14
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v4
     - name: Get Version from Project File
       id: get-version
       shell: bash
       run: echo "version=$(grep -oE '<Version>[^<]+' MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj | sed 's/<Version>//')" >> $GITHUB_OUTPUT
     - name: Install .NET
       uses: actions/setup-dotnet@v4
       with:
         dotnet-version: 9.0.x
     - name: Publish Application
       run: dotnet publish MouthKing.UI.Desktop/MouthKing.UI.Desktop.csproj -c Release -o publish -r osx-arm64
     - name: Create Velopack Release
       run: |
          dotnet tool install -g vpk
          vpk pack -u MouthKing --packTitle MouthKing --icon logo.icns -v ${{ steps.get-version.outputs.version }} -p publish -c macos-arm64 --delta None
          vpk upload github --repoUrl https://github.com/${{ github.repository }} --publish --merge -c macos-arm64 --releaseName "MouthKing ${{ steps.get-version.outputs.version }}" --tag v${{ steps.get-version.outputs.version }} --token ${{ secrets.GITHUB_TOKEN  }}
     - name: Upload Artifacts
       uses: actions/upload-artifact@v4
       with:
           name: macos-arm64-build
           path: ./Releases
           retention-days: 1

  upload-artiface:
    runs-on: ubuntu-latest
    needs: [deploy-win,deploy-linux,deploy-macos-x64,deploy-macos-arm64]
    steps:
    - name: create gitlab release
      id: create_release
      run: |
        json=$(curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/tsdyy/mouth-king/releases' \
             -d '{"access_token":"${{ secrets.GITLAB_API_TOKEN }}","tag_name":"${{ needs.deploy-win.outputs.version }}","name":"${{ needs.deploy-win.outputs.version }}","body":"${{ needs.deploy-win.outputs.version }}","target_commitish":"master"}')
        echo "$json"
        echo "::set-output name=json::$json"
    - uses: actions/download-artifact@v4.1.8
    - name: Finding files
      id: finding-files        
      run: |
        {
          echo 'FILELIST<<EOF'
          find . -type f -not -name 'assets*' -print 
          echo EOF
        } >> "$GITHUB_ENV"
    - name: upload artifacts to gitlab
      run: |
        echo "${{fromJson(steps.create_release.outputs.json).id}}"
        release_id=${{fromJson(steps.create_release.outputs.json).id}}
        release_url="https://gitee.com/api/v5/repos/tsdyy/mouth-king/releases/$release_id/attach_files"
        ls
        for i in $FILELIST; do
          curl -X POST \
          -F "access_token=${{ secrets.GITLAB_API_TOKEN }}" \
          -F "release_id=$release_id" \
          -F "file=@${i}" \
          $release_url
          echo "upload ${i}"
        done
        
